@page "/"
@using System
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Delegation.Blazor.Server.Base
@using Delegation.Service.Services
@using System.Globalization
@inject ILogger<Index> logger
@inject IWebHostEnvironment Environment
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject ExportService exportService
@inject ZipService zipService
@inject IStringLocalizer<Index> loc

<PageTitle>@loc["PageTitle"]</PageTitle>

<p>
    <b>CurrentCulture</b>: @CultureInfo.CurrentCulture
</p>

<div class="row">
    <div class="col-md-6">
        @if (isShowAlert)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Left"
                  ShowCloseIcon="true" CloseIconClicked="(() => isShowAlert=false)">@cardOneErrMsg</MudAlert>
        }
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h6">@loc["SelectDeleFormCardStr"]</MudText>
            <InputFile id="fileInput" OnChange="@UploadDeleFormBtnClick" hidden></InputFile>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Default"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                @loc["SelectFileBtn"]
            </MudButton>
            <div class="card-body">
                @if (isUploading)
                {
                    <MudText>@loc["Uploading"]</MudText>
                }
                else if (uploadForm != null)
                {
                    <MudList>Name: @uploadForm.Name</MudList>
                    <MudList>Last modified: @uploadForm.LastModified.ToString()</MudList>
                    <MudList>Size (bytes): @uploadForm.Size</MudList>
                    <MudList>Content type: @uploadForm.ContentType</MudList>
                }
            </div>
        </MudPaper>
    </div>
    
    <div class="col-md-6">
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h6">@loc["ExportCardStr"]</MudText>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Filled.PlayCircleOutline"
                       OnClick="@ExportBtnClick"
                       Disabled="@isExporting">
                @loc["ExportBtn"]
            </MudButton>
            <div class="card-body">
                <MudItem>
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="@isExporting" />
                </MudItem>
                <MudText>@exportProcessMsg</MudText>
            </div>   
        </MudPaper>
    </div>
</div>

@code {
    private bool isUploading = false;
    private IBrowserFile uploadForm = null;
    private bool isShowAlert = false;
    private bool isExporting = false;
    private string s89chFile = Path.Combine(Constant.FILE_FOLDER, Constant.S89CH);
    private string s89jpFile = Path.Combine(Constant.FILE_FOLDER, Constant.S89J);
    private string cardOneErrMsg = "";
    private string exportProcessMsg = "";

    private async Task UploadDeleFormBtnClick(InputFileChangeEventArgs e)
    {
        isUploading = true;
        try
        {
            uploadForm = e.File;
            if (uploadForm==null || !(uploadForm.Name.ToLower().EndsWith(".xls") || 
                    uploadForm.Name.ToLower().EndsWith(".xlsx")))
            {
                isShowAlert = true;
                cardOneErrMsg = loc["ErrorUploadFile"];
            }
            else
            {
                isShowAlert = false;
            }
        }
        catch (Exception ex)
        {
            logger.LogError("File: {Filename} Error: {Error}",
                e.File.Name, ex.Message);
        }
        isUploading = false;
    }

    private async Task ExportBtnClick()
    {
        if(uploadForm==null)
        {
            cardOneErrMsg = loc["SelectDeleFormCardStr"];
            isShowAlert = true;
        }
        else
        {
            isShowAlert = false;
            isExporting = true;
            exportProcessMsg = loc["Exporting"];
            if (!Directory.Exists(Constant.FILE_FOLDER))
            {
                Directory.CreateDirectory(Constant.FILE_FOLDER);
            }
            string fileExt = uploadForm.Name.ToLower().EndsWith("xlsx") ? "xlsx" : "xls";
            string temp = Path.Combine(Constant.FILE_FOLDER, string.Format("temp.{0}", fileExt));
            using (FileStream fs = new FileStream(temp, FileMode.Create))
            {
                await uploadForm.OpenReadStream().CopyToAsync(fs);
                exportService = new ExportService(new PDFService(Constant.FONT_FOLDER));
                Dictionary<string, Byte[]> dict = exportService.Start(fs, s89chFile, s89jpFile, 
                    Constant.DESC_STR, Constant.DESC_JP_STR, Constant.JP_FLAG_STR);
                exportProcessMsg = loc["Ziping"];
                byte[] zip = zipService.ZipData(dict);
                exportProcessMsg = "";
                string zipFileName = string.Format("{0}{1}.{2}", "delegation_zip_",
                    DateTime.Now.ToString("yyyyMMddHHmmss"), "zip");
                await BlazorDownloadFileService.DownloadFile(zipFileName, zip, "application/octet-stream");
            }
            File.Delete(temp);
            isExporting = false;
        }
    }
}