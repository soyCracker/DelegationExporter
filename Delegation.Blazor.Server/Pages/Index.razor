@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Delegation.Blazor.Server.Base
@inject ILogger<Index> logger
@inject IWebHostEnvironment Environment


<PageTitle>輸出委派</PageTitle>



<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">1. 選擇委派表檔案</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (isUploading)
        {
            <MudText>Uploading...</MudText>
        }
        else if (uploadFile != null)
        {
            <MudListItem>Name: @uploadFile.Name</MudListItem>
            <MudListItem>Last modified: @uploadFile.LastModified.ToString()</MudListItem>
            <MudListItem>Size (bytes): @uploadFile.Size</MudListItem>
            <MudListItem>Content type: @uploadFile.ContentType</MudListItem>
        }
    </MudCardContent>
    <MudCardActions>
        <InputFile id="fileInput" OnChange="@UploadFile" hidden></InputFile>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Default"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput">
            選擇委派表檔案
        </MudButton>
    </MudCardActions>
</MudCard>



@code {
    //private long maxFileSize = 1024 * 15;
    private bool isUploading = false;
    private IBrowserFile uploadFile = null;

    public Index()
    {

    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        isUploading = true;
        try
        {
            uploadFile = e.File;
            //var trustedFileNameForFileStorage = Path.GetRandomFileName();
            //string uploadFileFolder = Path.Combine(Environment.ContentRootPath, Constant.UPLOAD_FILE_FOLDER);

            //if (!File.Exists(uploadFileFolder))
            //{
            //    Directory.CreateDirectory(uploadFileFolder);
            //}
            //var path = Path.Combine(uploadFileFolder, trustedFileNameForFileStorage);
            //logger.LogInformation("上傳檔案路徑:" + path);

            await using MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);
            
            logger.LogDebug("測試memorystream: " + ms.Length);
        }
        catch (Exception ex)
        {
            logger.LogError("File: {Filename} Error: {Error}",
                e.File.Name, ex.Message);
        }
        isUploading = false;
    }
}