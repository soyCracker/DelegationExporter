@page "/"
@using System
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Delegation.Blazor.Server.Base
@using Delegation.Service.Services
@using System.Globalization
@inject ILogger<Index> logger
@inject IWebHostEnvironment Environment
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject ExportService exportService
@inject IStringLocalizer<Index> loc

<PageTitle>@loc["PageTitle"]</PageTitle>

<p>
    <b>CurrentCulture</b>: @CultureInfo.CurrentCulture
</p>

<div class="row">
    <div class="col-md-6">
        @if (isShowAlert)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Left"
                  ShowCloseIcon="true" CloseIconClicked="(() => isShowAlert=false)">@loc["SelectDeleFormCardStr"]</MudAlert>
        }
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h6">@loc["SelectDeleFormCardStr"]</MudText>
            <InputFile id="fileInput" OnChange="@UploadDeleFormBtnClick" hidden></InputFile>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Default"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                @loc["SelectFileBtn"]
            </MudButton>
            <div class="card-body">
                @if (isUploading)
                {
                    <MudText>Uploading...</MudText>
                }
                else if (uploadDeleForm != null)
                {
                    <MudList>Name: @uploadDeleForm.Name</MudList>
                    <MudList>Last modified: @uploadDeleForm.LastModified.ToString()</MudList>
                    <MudList>Size (bytes): @uploadDeleForm.Size</MudList>
                    <MudList>Content type: @uploadDeleForm.ContentType</MudList>
                }
            </div>
        </MudPaper>
    </div>
    
    <div class="col-md-6">
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h6">@loc["ExportCardStr"]</MudText>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Filled.PlayCircleOutline"
                       OnClick="@ExportBtnClick"
                       Disabled="@isExporting">
                @loc["ExportBtn"]
            </MudButton>
            <div class="card-body">
                <MudItem>
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="@isExporting" />
                </MudItem>
            </div>   
        </MudPaper>
    </div>
</div>

@code {
    //private long maxFileSize = 1024 * 15;
    private bool isUploading = false;
    private IBrowserFile uploadDeleForm = null;
    private bool isShowAlert = false;
    private bool isExporting = false;
    string s89chFile = Path.Combine(Constant.FILE_FOLDER, Constant.S89CH);
    string s89jpFile = Path.Combine(Constant.FILE_FOLDER, Constant.S89J);

    private async Task UploadDeleFormBtnClick(InputFileChangeEventArgs e)
    {
        isUploading = true;
        try
        {
            uploadDeleForm = e.File;
            //var trustedFileNameForFileStorage = Path.GetRandomFileName();
            //string uploadFileFolder = Path.Combine(Environment.ContentRootPath, Constant.UPLOAD_FILE_FOLDER);

            //if (!File.Exists(uploadFileFolder))
            //{
            //    Directory.CreateDirectory(uploadFileFolder);
            //}
            //var path = Path.Combine(uploadFileFolder, trustedFileNameForFileStorage);
            //logger.LogInformation("上傳檔案路徑:" + path);
            isShowAlert = uploadDeleForm == null ? true : false;

        }
        catch (Exception ex)
        {
            logger.LogError("File: {Filename} Error: {Error}",
                e.File.Name, ex.Message);
        }
        isUploading = false;
    }

    private async Task ExportBtnClick()
    {
        if(uploadDeleForm==null)
        {
            isShowAlert = true;
        }
        else
        {
            isExporting = true;

            await using MemoryStream ms = new MemoryStream();
            await uploadDeleForm.OpenReadStream().CopyToAsync(ms);

            exportService = new ExportService(new PDFService(Constant.FONT_FOLDER));
            Dictionary<string, MemoryStream> dict = exportService.Start(ms, s89chFile, s89jpFile, Constant.DESC_STR, 
                Constant.DESC_JP_STR, Constant.JP_FLAG_STR);

            //await using MemoryStream ms = new MemoryStream();
            //await uploadDeleForm.OpenReadStream().CopyToAsync(ms);
            //await BlazorDownloadFileService.DownloadFile("test_20220802", ms, "application/octet-stream");

            //logger.LogDebug("測試memorystream: " + ms.Length);

            isExporting = false;
        }
    }

    private void Export()
    {
        
    }
}